# import cv2
# import pickle
# import os
# import streamlit as st
# from core.face_detection.detector import detect_faces  
# from utils.helpers import get_path, append_attendance_log, is_action_allowed

# def recognize_and_log(action="check-in"):
#     model_path = get_path("data/models/model.pkl")  
    
#     if not os.path.exists(model_path):
#         return False, "M√¥ h√¨nh nh·∫≠n di·ªán ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán. Vui l√≤ng li√™n h·ªá admin."
    
#     try:
#         with open(model_path, "rb") as f:
#             recognizer = pickle.load(f)
#     except Exception as e:
#         return False, f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}"
    
#     cap = None
#     for index in range(3):
#         cap = cv2.VideoCapture(index)
#         if cap.isOpened():
#             # print(f"[DEBUG] Webcam opened with index {index}")
#             break
#         cap.release()
        
#     if not cap or not cap.isOpened():
#         return False, "Kh√¥ng th·ªÉ m·ªü webcam. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi webcam."
    
#     video_placeholder = st.empty()
#     recognized = False
#     result_message = ""
    
#     try:
#         while not recognized:
#             ret, frame = cap.read()
#             if not ret:
#                 result_message = "Kh√¥ng th·ªÉ l·∫•y h√¨nh ·∫£nh t·ª´ webcam."
#                 break
            
#             frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#             video_placeholder.image(frame_rgb, caption="ƒêang nh·∫≠n di·ªán khu√¥n m·∫∑t...", use_container_width=True)
            
#             faces = detect_faces(frame)
#             for (x, y, w, h) in faces:
#                 roi = frame[y:y+h, x:x+w]
#                 resized = cv2.resize(roi, (50, 50)).flatten()
#                 try:
#                     name = recognizer.predict(resized) # ch·ªâ d√πng ƒë·ªÉ detect -> ko c√≥ nh·∫≠n d·∫°ng r√µ the score
#                     # name, confidence = recognizer.predict_with_confidence(resized)

#                     # if confidence < 0.6:
#                     #     result_message = f"Kh√¥ng ƒë·ªß ƒë·ªô tin c·∫≠y ƒë·ªÉ nh·∫≠n di·ªán ({round(confidence*100)}%). Vui l√≤ng th·ª≠ l·∫°i."
#                     #     recognized = True
#                     #     break
                    
#                     # ‚úÖ N·∫øu l√† admin ‚Üí demo, kh√¥ng ghi log
#                     if st.session_state.get("is_admin", False):
#                         result_message = f"[DEMO] Nh·∫≠n di·ªán th√†nh c√¥ng: {name} (Admin demo)"
#                         recognized = True
#                         break
                    
#                     is_allowed, check_msg = is_action_allowed(name, action)
#                     if not is_allowed:
#                         result_message = check_msg
#                         recognized = True
#                         break
                    
#                     # ‚úÖ N·∫øu l√† ng∆∞·ªùi d√πng th∆∞·ªùng ‚Üí ghi log
#                     position = "attendance"
#                     success, message = append_attendance_log(name, roi, position, action)
                    
#                     if success:
#                         result_message = f"ƒêi·ªÉm danh {action} th√†nh c√¥ng cho {name}."
#                     else:
#                         result_message = f"ƒêi·ªÉm danh {action} kh√¥ng th√†nh c√¥ng: {message}"
#                     recognized = True
#                     break
#                 except Exception as e:
#                     result_message = "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t. Vui l√≤ng th·ª≠ l·∫°i."
            
#             if cv2.waitKey(1) & 0xFF == 27:
#                 result_message = "ƒê√£ h·ªßy nh·∫≠n di·ªán."
#                 break
#     except Exception as e:
#         result_message = f"L·ªói trong qu√° tr√¨nh nh·∫≠n di·ªán: {e}"
#     finally:
#         cap.release()
#         cv2.destroyAllWindows()
    
#     return recognized, result_message

import cv2
import pickle
import os
import tempfile
import streamlit as st
from core.face_detection.detector import detect_faces
from utils.helpers import get_path, append_attendance_log, is_action_allowed, has_trained_data
from utils.user_utils import is_logged_in

def recognize_and_log(action="check-in", video_file=None):
    if not is_logged_in():
        return False, "‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y."

    username = st.session_state.username
    if not has_trained_data(username):
        return False, f"‚ùå D·ªØ li·ªáu khu√¥n m·∫∑t cho {username} ch∆∞a ƒë∆∞·ª£c thu th·∫≠p. Vui l√≤ng li√™n h·ªá admin."
    
    
    model_path = get_path("data/models/model.pkl")
    if not os.path.exists(model_path):
        return False, "‚ùå M√¥ h√¨nh ch∆∞a hu·∫•n luy·ªán. Vui l√≤ng li√™n h·ªá admin."

    try:
        with open(model_path, "rb") as f:
            recognizer = pickle.load(f)
    except Exception as e:
        return False, f"‚ùå L·ªói t·∫£i m√¥ h√¨nh: {e}"

    if video_file is None:
        # Webcam
        cap = None
        for index in range(3):
            cap = cv2.VideoCapture(index)
            if cap.isOpened():
                break
            cap.release()
        if not cap or not cap.isOpened():
            return False, "‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c webcam."
    else:
        # Video file
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as tmp:
            tmp.write(video_file.read())
            video_path = tmp.name
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            return False, "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file video."

    video_placeholder = st.empty()
    recognized = False
    result_message = ""

    while cap.isOpened() and not recognized:
        ret, frame = cap.read()
        if not ret:
            result_message = "‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c khung h√¨nh."
            break

        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        video_placeholder.image(frame_rgb, caption="üîç ƒêang nh·∫≠n di·ªán...", use_container_width=True)

        faces = detect_faces(frame)
        for (x, y, w, h) in faces:
            roi = frame[y:y+h, x:x+w]
            resized = cv2.resize(roi, (50, 50)).flatten()

            try:
                # name = recognizer.predict(resized)
                name, confidence = recognizer.predict_with_confidence(resized)

                if confidence < 0.8:
                    result_message = f"Kh√¥ng ƒë·ªß ƒë·ªô tin c·∫≠y ƒë·ªÉ nh·∫≠n di·ªán ({round(confidence*100)}%). Vui l√≤ng th·ª≠ l·∫°i."
                    recognized = True
                    break
                
                # So s√°nh t√™n nh·∫≠n di·ªán v·ªõi username
                if name != username:
                    result_message = f"‚ùå Khu√¥n m·∫∑t kh√¥ng kh·ªõp v·ªõi t√†i kho·∫£n {username}."
                    recognized = True
                    break
                
                
                if st.session_state.get("is_admin", False):
                    result_message = f"‚úÖ [DEMO] Nh·∫≠n di·ªán: {name}"
                    recognized = True
                    break

                is_allowed, check_msg = is_action_allowed(name, action)
                if not is_allowed:
                    result_message = check_msg
                    recognized = True
                    break

                success, msg = append_attendance_log(name, roi, "attendance", action)
                result_message = f"‚úÖ {msg}" if success else f"‚ùå {msg}"
                recognized = True
                break

            except Exception as e:
                result_message = f"‚ùå L·ªói nh·∫≠n di·ªán: {e}"
                recognized = True
                break

    cap.release()
    video_placeholder.empty()
    cv2.destroyAllWindows()
    if video_file is not None:
        os.unlink(video_path)  # X√≥a file t·∫°m sau khi x·ª≠ l√Ω

    return recognized, result_message
